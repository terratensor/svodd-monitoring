name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/README.md'

env:
  REGISTRY: ghcr.io/terratensor
  REGISTRY_HOST: ghcr.io
  HOST: ${{ secrets.PRODUCTION_HOST }}  # IP или домен вашего сервера
  PORT: 22  # Порт SSH (по умолчанию 22)
  DEPLOY_DIR: /home/deploy/svodd-monitoring  # Папка на сервере для деплоя

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Inject branch slug
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set image tag
        run: echo "IMAGE_TAG=${{ env.GITHUB_REF_SLUG }}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: audetv
          password: ${{ github.token }}

      - name: Build and push Prometheus image
        run: |
          docker build -f Dockerfile.prometheus -t ${{ env.REGISTRY }}/svodd-prometheus:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/svodd-prometheus:${{ env.IMAGE_TAG }}

      - name: Build and push Grafana image
        run: |
          docker build -f Dockerfile.grafana -t ${{ env.REGISTRY }}/svodd-grafana:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/svodd-grafana:${{ env.IMAGE_TAG }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRODUCTION_KEY }}
          known_hosts: ${{ secrets.PRODUCTION_HOST }}
        if: ${{ github.ref == 'refs/heads/main' }}

      - name: Prepare docker-compose.yml
        run: |
          envsubst < docker-compose.yml > docker-compose-env.yml
          cat docker-compose-env.yml

      - name: Copy docker-compose.yml to server
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ env.PORT }} docker-compose-env.yml deploy@${{ env.HOST }}:${{ env.DEPLOY_DIR }}/docker-compose.yml
          rm -f docker-compose-env.yml

      - name: Create monitoring-internal network if not exists
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ env.PORT }} deploy@${{ env.HOST }} "docker network create --driver=overlay monitoring-internal || true"

      - name: Deploy to Docker Swarm
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ env.PORT }} deploy@${{ env.HOST }} "cd ${{ env.DEPLOY_DIR }} && docker stack deploy -c docker-compose.yml monitoring"