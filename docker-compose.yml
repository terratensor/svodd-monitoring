version: "3.9"

services:
  prometheus:
    image: ${REGISTRY}/svodd-prometheus:${IMAGE_TAG}
    networks:
      - traefik-public
      - monitoring-internal
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.prometheus.rule=Host(`prometheus.svodd.ru`)
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.entrypoints=https
        - traefik.http.routers.prometheus.tls=true
        - traefik.http.routers.prometheus.tls.certresolver=letsEncrypt
      placement:
        constraints: [ node.labels.worker == monitoring ]

  grafana:
    image: ${REGISTRY}/svodd-grafana:${IMAGE_TAG}
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - traefik-public
      - monitoring-internal
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.grafana.rule=Host(`grafana.svodd.ru`)
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.entrypoints=https
        - traefik.http.routers.grafana.tls=true
        - traefik.http.routers.grafana.tls.certresolver=letsEncrypt
      placement:
        constraints: [ node.labels.worker == monitoring ]

  node-exporter:
    image: prom/node-exporter:latest
    networks:
      - monitoring-internal
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]
    ports:
      - target: 9100
        published: 9100
        protocol: tcp
        mode: host

volumes:
  grafana-storage:

networks:
  traefik-public:
    external: true
  monitoring-internal:
    name: monitoring-internal
    external: true
    driver: overlay